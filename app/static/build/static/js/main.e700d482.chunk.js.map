{"version":3,"sources":["ArtistList.js","MoviesList.js","App.js","serviceWorker.js","index.js"],"names":["ArtistList","props","artists","useState","activeSource","setActiveSource","length","map","artist","onClick","artist_name","key","className","href","source_link","target","rel","source_name","genArtist","MoviesList","fetchMovieList","fetch","state","page","items","method","mode","headers","then","response","json","setState","movieList","movies","resultsLength","results_length","e","console","error","genMovie","movie","title","ranking","onClickPrev","prevState","onClickNext","this","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e700d482.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nfunction ArtistList(props) {\n  const { artists }  = props;\n\n  const [activeSource, setActiveSource] = useState('')\n\n  const genArtist = (artist) => {\n    return (\n      <li\n        onClick={() => {\n          if(activeSource === artist.artist_name) {\n            setActiveSource('')\n          } else {\n            setActiveSource(artist.artist_name)\n          }\n        }}\n        key={artist.artist_name}\n      >\n        <div className={`see-source-arrow ${activeSource === artist.artist_name ? 'active' : ''}`}></div>\n        {artist.artist_name}\n        {activeSource === artist.artist_name &&\n          <a\n            className=\"active-source\"\n            href={artist.source_link}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            {artist.source_name}\n          </a>\n        }\n      </li>\n    );\n  }\n\n  return (\n    <ul>\n      <h5>Recommended by</h5>\n      {artists.length > 0 && artists.map(artist => {\n        return genArtist(artist)\n      })}\n    </ul>\n  );\n}\n\nexport default ArtistList;","import React from 'react';\nimport './styles/main_movie_list.scss';\nimport ArtistList from './ArtistList';\n\n\nexport default class MoviesList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movieList: [],\n      page: 1,\n      items: 4,\n      resultsLength: 0\n    }\n  }\n\n  fetchMovieList = () => {\n    try {\n      fetch(\n        `https://the-shot-list-app.herokuapp.com/api/v1/recommendations?page=${this.state.page}&items=${this.state.items}`,\n        {\n          method: \"GET\",\n          mode: 'cors',\n          headers: {\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': '*',\n            'Access-Control-Allow-Methods': 'GET',\n            'Access-Control-Allow-Headers': 'Origin, Content-Type, X-Auth-Token'\n          }\n        }\n      ).then(response => response.json()).then(json =>\n        this.setState({\n          movieList: json.movies,\n          resultsLength: json.results_length\n        })\n      )\n    } catch(e) {\n      console.error()\n    }\n  }\n\n  componentDidMount(){\n    this.fetchMovieList();\n  }\n\n  genMovie = movie => {\n    return (\n      <li key={movie.title}>\n        <h2 className=\"ranking\">{movie.ranking < 10 ? `0${movie.ranking}` : `${movie.ranking}`}</h2>\n        <h3>{movie.title}</h3>\n        <ArtistList artists={movie.artists}/>\n      </li>\n    );\n  }\n\n  onClickPrev = () => {\n    this.setState((prevState => {\n      prevState.page -= 1;\n      return {page: prevState.page}\n    }), () => this.fetchMovieList());\n  }\n\n  onClickNext = () => {\n    this.setState((prevState => {\n      prevState.page += 1;\n      return {page: prevState.page}\n    }), () => this.fetchMovieList())\n  }\n\n  render() {\n    return(\n      <div className=\"movie-list\">\n        <div className=\"tab-header\">\n          <h1>The Shot List</h1>\n          <p>Filmmakers' Top Picks</p>\n        </div>\n        <ol>\n          {this.state.movieList.length > 0 && this.state.movieList.map(movie => {\n            return this.genMovie(movie)\n          })}\n        </ol>\n        <div className=\"pagination\">\n          {this.state.page > 1 &&\n            <div\n              className=\"prev\"\n              onClick={() => this.onClickPrev()}\n            >\n              <h5>prev</h5>\n              <div className=\"prev-arrow\"></div>\n              <div className=\"rectangle\"></div>\n            </div>\n          }\n          {this.state.movieList && this.state.movieList[this.state.movieList.length - 1] && (this.state.movieList[this.state.movieList.length - 1].ranking !== this.state.resultsLength) &&\n            <div\n              className=\"next\"\n              onClick={() => this.onClickNext()}\n            >\n              <h5>next</h5>\n              <div className=\"rectangle\"></div>\n              <div className=\"next-arrow\"></div>\n            </div>\n          }\n        </div>\n      </div>\n    )\n  }\n}","import React from 'react';\nimport MoviesList from './MoviesList';\nimport './styles/_base.scss';\n// import AdminForm from './AdminForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"app-body\">\n        <MoviesList />\n      </div>\n      {/* if admin */}\n      {/* <AdminForm/> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}